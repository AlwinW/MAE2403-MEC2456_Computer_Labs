% MATLAB can use inbuilt function wavread(...) to read in audio wav file. % MATLAB can output digital signal to a wav file by using wavwrite(...)%% y:        the read-in digital signal% fs:       sample rate in Hertz, i.e., dt=1/fs.% nbits:    number of bit per sample used to encord the data in file.%%%%clc; clear all; % Using wavread to read digital audio file 'triangle.wav'. This file should% be put in the same directory of this m-file.[y, fs] = audioread('triangle.wav'); % Use the inbuilt MATLAB sound function to play the audio at the original sample% rate.disp('Playing at the original sample rate.');sound(y, fs); % The FFT of the digital signal.Y = fft(y);%Own notes:% MATLAB stores this as the positive then negative values,% so we need to generate a frequency vector that is positive% then negative!! %% Generate the frequncy.Fc = fs/2;N=length(y);freq = Fc*linspace(0,1,N/2);freq2 = cat(2,freq,freq(1:N/2)-Fc);% put your code here% Plot of power spectrumfigureplot(freq2,abs(Y)/N);title('Amplitude Spectrum of y(t)')xlabel('Frequency (Hz)')ylabel('|Y(f)|')% applying low pass filterf_cutoff = 0.45*10^4;filt = exp(-(freq2/f_cutoff).^20);Filt_Y = Y.*filt';% plotting out the normalised power spectrumfigureplot(freq2,abs(Filt_Y)/N);title('Low Pass of Y(t)')xlabel('Frequency (Hz)')ylabel('|Y(f)|')%% inverse FFTfilt_y = ifft(Filt_Y);% save the wav file and reply.audiowrite('trianglelowpass.wav', filt_y, fs);[filt_y, fs]=audioread('trianglelowpass.wav');pause(5);disp('Playing at the low-pass sample.');sound(filt_y, fs);