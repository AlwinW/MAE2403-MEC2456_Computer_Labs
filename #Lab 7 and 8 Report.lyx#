#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage[framed, numbered]{matlab-prettifier}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language australian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "palatino" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "style={Matlab-editor}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
MAE2403 Lab 7 and 8
\end_layout

\begin_layout Author
Alwin Wang
\begin_inset Newline newline
\end_inset

2510 2176
\end_layout

\begin_layout Date
5th October 2016
\end_layout

\begin_layout Section
Laboratory 7
\end_layout

\begin_layout Problem
Explicit FDM method to solve the diffusion-convection PDE 
\begin_inset Formula $\frac{\partial u}{\partial t}=\frac{\partial^{2}u}{\partial x^{2}}-\lambda\frac{\partial u}{\partial x}$
\end_inset

 where 
\begin_inset Formula $\lambda=3.0$
\end_inset

, 
\begin_inset Formula $0.0\leq x\leq1.0$
\end_inset

 and 
\begin_inset Formula $0.0\leq t\leq0.2$
\end_inset

.
 The initial condition is 
\begin_inset Formula $u\left(t=0\right)=\sin\left(\frac{3\pi x}{2}\right)$
\end_inset

 and the boundary condition is 
\begin_inset Formula $u\left(x=0.0\right)=0.0$
\end_inset

 and 
\begin_inset Formula $u\left(x=1.0\right)=-1.0$
\end_inset

.
\end_layout

\begin_layout Problem
(a) Hand Calculation: See Appendix 1
\end_layout

\begin_layout Problem
(b) Hand Calculation: See Appendix 1
\end_layout

\begin_layout Problem
(c) Hand Calculation: See Appendix 1
\end_layout

\begin_layout Problem
(d) The MATLAB m-file solution for the PDE for a single Nx is shown below.
\end_layout

\begin_layout Problem
\begin_inset listings
lstparams "style={Matlab-editor}"
inline false
status open

\begin_layout Plain Layout

% MATLAB code to compute explicit FDM for:
\end_layout

\begin_layout Plain Layout

% U_t = U_xx - lambda*U_x
\end_layout

\begin_layout Plain Layout

% n is the time step
\end_layout

\begin_layout Plain Layout

% j is the position step
\end_layout

\begin_layout Plain Layout

% Matrix is a grid of (x_j, t_n)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Need to clear the previous u and whatnot values for each run
\end_layout

\begin_layout Plain Layout

clear all
\end_layout

\begin_layout Plain Layout

% Defining Lambda 
\end_layout

\begin_layout Plain Layout

lambda = 3;         
\end_layout

\begin_layout Plain Layout

% Setting up x (iterate for various Nx)
\end_layout

\begin_layout Plain Layout

xmin = 0; xmax = 1;
\end_layout

\begin_layout Plain Layout

Nx = 128;
\end_layout

\begin_layout Plain Layout

dx = (xmax-xmin)/Nx;
\end_layout

\begin_layout Plain Layout

% Setting up t (calculated from stability)
\end_layout

\begin_layout Plain Layout

tmin = 0; tmax = 0.2;
\end_layout

\begin_layout Plain Layout

    % From stability dt < 2/lambda^2 and dt < dx^2/2
\end_layout

\begin_layout Plain Layout

dt = min([dx^2/2 2/lambda^2]);
\end_layout

\begin_layout Plain Layout

Nt = ceil((tmax - tmin)/dt);    % Minimum integer Nt
\end_layout

\begin_layout Plain Layout

dt = (tmax-tmin)/Nt;            % Update dt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Creating mesh
\end_layout

\begin_layout Plain Layout

xmesh = xmin:dx:xmax;
\end_layout

\begin_layout Plain Layout

% Initial condition
\end_layout

\begin_layout Plain Layout

u_init = sin(3*pi*xmesh/2);
\end_layout

\begin_layout Plain Layout

u(1,:) = u_init;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% For each time value
\end_layout

\begin_layout Plain Layout

for n = 1:Nt
\end_layout

\begin_layout Plain Layout

    % Go along the x direction from 2 to 2nd last
\end_layout

\begin_layout Plain Layout

    for j = 2:size(u,2)-1
\end_layout

\begin_layout Plain Layout

        u(n+1,j) = u(n,j) +dt*((u(n,j-1)-2*u(n,j)+u(n,j+1))/dx^2 - ...
\end_layout

\begin_layout Plain Layout

            lambda*((u(n,j+1)-u(n,j-1))/(2*dx)));
\end_layout

\begin_layout Plain Layout

    end
\end_layout

\begin_layout Plain Layout

    % Set the boundary values for the next time value
\end_layout

\begin_layout Plain Layout

    u(n+1,1) = u(n,1);
\end_layout

\begin_layout Plain Layout

    u(n+1,end) = u(n,end);
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Taking the average value of the solution
\end_layout

\begin_layout Plain Layout

u_avg = mean(u(Nt,:));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Display the result
\end_layout

\begin_layout Plain Layout

fprintf('Nx = %4d, Nt = %4d, dx = %6.8f, dt = %6.8f, u_avg = %6.8f
\backslash
n', ...
\end_layout

\begin_layout Plain Layout

        Nx, Nt, dx, dt, u_avg);
\end_layout

\end_inset


\end_layout

\begin_layout Problem
This code was then turned into a custom MATLAB function in order to determine
 the values at various Nx and the required value of Nx for a given precision.
\end_layout

\begin_layout Problem
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

% Determine the various average u values for various Nx
\end_layout

\begin_layout Plain Layout

for Nx = [8, 16, 32, 64, 128]
\end_layout

\begin_layout Plain Layout

    % Calculate the values
\end_layout

\begin_layout Plain Layout

    [u, Nx, Nt, dx, dt, u_avg] = explicit_FDM_func(Nx);
\end_layout

\begin_layout Plain Layout

    % Display the result
\end_layout

\begin_layout Plain Layout

    fprintf('Nx = %4d, Nt = %4d, dx = %2.4f, dt = %2.4f, u_avg = %2.4f
\backslash
n', ...
\end_layout

\begin_layout Plain Layout

        Nx, Nt, dx, dt, u_avg);
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Determine the minimum value of Nx
\end_layout

\begin_layout Plain Layout

u_avg = 1;
\end_layout

\begin_layout Plain Layout

Nx = 1;
\end_layout

\begin_layout Plain Layout

while abs(u_avg + 0.225) > 0.01
\end_layout

\begin_layout Plain Layout

    % Increase Nx
\end_layout

\begin_layout Plain Layout

    Nx = Nx + 1;
\end_layout

\begin_layout Plain Layout

    % Calculate the values
\end_layout

\begin_layout Plain Layout

    [u, Nx, Nt, dx, dt, u_avg] = explicit_FDM_func(Nx);
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

% Display the result
\end_layout

\begin_layout Plain Layout

fprintf('Nx = %4d, Nt = %4d, dx = %2.4f, dt = %2.4f, u_avg = %2.4f
\backslash
n', ...
\end_layout

\begin_layout Plain Layout

    Nx, Nt, dx, dt, u_avg);
\end_layout

\end_inset


\end_layout

\begin_layout Problem
The output of this code is shown below:
\end_layout

\begin_layout Problem
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

>> Week8Lab7Q1
\end_layout

\begin_layout Plain Layout

Nx =    8, Nt =   26, dx = 0.1250, dt = 0.0077, u_avg = -0.2548
\end_layout

\begin_layout Plain Layout

Nx =   16, Nt =  103, dx = 0.0625, dt = 0.0019, u_avg = -0.2399
\end_layout

\begin_layout Plain Layout

Nx =   32, Nt =  410, dx = 0.0313, dt = 0.0005, u_avg = -0.2319
\end_layout

\begin_layout Plain Layout

Nx =   64, Nt = 1639, dx = 0.0156, dt = 0.0001, u_avg = -0.2277
\end_layout

\begin_layout Plain Layout

Nx =  128, Nt = 6554, dx = 0.0078, dt = 0.0000, u_avg = -0.2256
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Nx =   24, Nt =  231, dx = 0.0417, dt = 0.0009, u_avg = -0.2346
\end_layout

\end_inset


\end_layout

\begin_layout Problem
Thus, it can be seen that as Nx increases so does Nt as 
\begin_inset Formula $\Delta t<\frac{\Delta x^{2}}{2}$
\end_inset

 from the hand calculation from Appendix 1.
 It can also be seen that the value for 
\begin_inset Formula $u_{avg}$
\end_inset

 steadily approaches the analytical solution of 
\begin_inset Formula $-0.225$
\end_inset

 as Nx increases.
 For a precision of 0.01 the number of points in the 
\begin_inset Formula $x$
\end_inset

 domain required was 24.
\end_layout

\begin_layout Section
Laboratory 8
\end_layout

\begin_layout Problem
Implicit FDM method to solve the diffusion-convection PDE 
\begin_inset Formula $\frac{\partial u}{\partial t}=\frac{\partial^{2}u}{\partial x^{2}}$
\end_inset

 where 
\begin_inset Formula $0.0\leq x\leq10.0$
\end_inset

 and 
\begin_inset Formula $0.0\leq t\leq2.0$
\end_inset

.
 The initial condition is 
\begin_inset Formula $u\left(t=0\right)=\sin\left(x\right)+\sin\left(\frac{x}{2}\right)+\sin\left(\frac{x}{3}\right)+\sin\left(\frac{x}{4}\right)$
\end_inset

 and the boundary condition is the Dirichlet boundary condition.
\end_layout

\begin_layout Problem
(a) Hand Calculation: See Appendix 2
\end_layout

\begin_layout Problem
(b) Hand Calculation: See Appendix 2
\end_layout

\begin_layout Problem
(c) MATLAB m-code for the implicit method is shown below.
\end_layout

\begin_layout Problem
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

% MATLAB code to compute implicit FDM for:
\end_layout

\begin_layout Plain Layout

% U_t = U_xx
\end_layout

\begin_layout Plain Layout

clear all;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% x domain
\end_layout

\begin_layout Plain Layout

x_min = 0; x_max = 10;
\end_layout

\begin_layout Plain Layout

dx = 0.1;   % Arbitrarily Chosen
\end_layout

\begin_layout Plain Layout

% t domain
\end_layout

\begin_layout Plain Layout

coef = 0.5;  % Some relationship between dt/dx^2 to vary
\end_layout

\begin_layout Plain Layout

delta_t = dx.^2.*coef;
\end_layout

\begin_layout Plain Layout

t_min = 0; t_max = 2;
\end_layout

\begin_layout Plain Layout

Nt = (t_max-t_min)/delta_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Initial Mesh
\end_layout

\begin_layout Plain Layout

x = x_min:dx:x_max;
\end_layout

\begin_layout Plain Layout

% Initial condition
\end_layout

\begin_layout Plain Layout

init_field = sin(x) + sin(x/2) + sin(x/3) + sin(x/4);
\end_layout

\begin_layout Plain Layout

u(:,1) = init_field;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% First loop for time
\end_layout

\begin_layout Plain Layout

for jj = 1:Nt
\end_layout

\begin_layout Plain Layout

    % Second loop for x
\end_layout

\begin_layout Plain Layout

    for ii = 2:size(u,1)-1
\end_layout

\begin_layout Plain Layout

        % Vectors for tridiagonal matrix
\end_layout

\begin_layout Plain Layout

        a(ii) = 1+2*coef;   % 1 + 2 * dt/dx^2
\end_layout

\begin_layout Plain Layout

        b(ii) = -coef;      % -dt/dx^2
\end_layout

\begin_layout Plain Layout

        d(ii) = u(ii,jj);   % Solution vector (RHS)
\end_layout

\begin_layout Plain Layout

    end
\end_layout

\begin_layout Plain Layout

    % Boundary Conditions BC + dt/dx^2
\end_layout

\begin_layout Plain Layout

    d(2) = d(2) + coef*u(1,1);
\end_layout

\begin_layout Plain Layout

    d(size(u,1)-1) = d(size(u,1)-1) + coef*u(size(u,1),1);
\end_layout

\begin_layout Plain Layout

    % Constructing tridiagonal matrix
\end_layout

\begin_layout Plain Layout

    A = diag(a(2:size(u,1)-1),0) + diag(b(2:size(u,1)-2),1) + diag(b(2:size(u,1)
-2),-1);
\end_layout

\begin_layout Plain Layout

    % Solving matrix equation using GaussSeidel code from previous week's
 work
\end_layout

\begin_layout Plain Layout

    [u_sol, iter] = GaussSeidel(A,d(2:size(u,1)-1)',10^-6);
\end_layout

\begin_layout Plain Layout

    % Storing result in matrix
\end_layout

\begin_layout Plain Layout

    u(:,jj+1) = [u(1,1) u_sol' u(size(u,1),1)]';
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Plotting contour of results
\end_layout

\begin_layout Plain Layout

contourf(u');
\end_layout

\end_inset


\end_layout

\begin_layout Problem
From the previous lab report, it was found that the explicit method is only
 stable when the following holds:
\begin_inset Formula 
\[
\begin{cases}
\Delta x>\frac{2}{\lambda}\\
\Delta t<\frac{\Delta x^{2}}{2}\\
\Delta t<\frac{2}{\lambda^{2}}
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Problem
The second condition can be rewritten as 
\begin_inset Formula $\frac{\Delta t}{\Delta x^{2}}<2$
\end_inset

 for stability.
 This can be now tested using the implicit method by varying the value of
 
\begin_inset Quotes eld
\end_inset

coef
\begin_inset Quotes erd
\end_inset

 in the implicit FDM code.
 The results are shown below:
\end_layout

\begin_layout Problem
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=0.5
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 1.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=1.0
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 2.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Problem
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=2.5
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 3.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=10
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 4.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Problem
From the output, it is clear that even for large values of 
\begin_inset Formula $\frac{\Delta t}{\Delta x^{2}}$
\end_inset

, the implicit FDM method provides a stable solution as the solution contour
 does not appear to change.
 When compared to the unstable solution in the hand calculation shown in
 Appendix 1 it is clear that the implicit method benefits from unconditional
 stability.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Problem
Crank-Nicolson method to solve the diffusion-convection PDE 
\begin_inset Formula $\frac{\partial u}{\partial t}=\frac{\partial^{2}u}{\partial x^{2}}$
\end_inset

 where 
\begin_inset Formula $0.0\leq x\leq10.0$
\end_inset

 and 
\begin_inset Formula $0.0\leq t\leq2.0$
\end_inset

.
 The initial condition is 
\begin_inset Formula $u\left(t=0\right)=\sin\left(x\right)+\sin\left(\frac{x}{2}\right)+\sin\left(\frac{x}{3}\right)+\sin\left(\frac{x}{4}\right)$
\end_inset

 and the boundary condition is the Dirichlet boundary condition.
\end_layout

\begin_layout Problem
(a) Hand Calculation: See Appendix 3
\end_layout

\begin_layout Problem
(b) Hand Calculation: See Appendix 3
\end_layout

\begin_layout Problem
(c) MATLAB m-code for the implicit method is shown below.
\end_layout

\begin_layout Problem
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

% MATLAB code to compute Crank Nicolson for:
\end_layout

\begin_layout Plain Layout

% U_t = U_xx
\end_layout

\begin_layout Plain Layout

clear all; clf; close all; clc; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% x domain
\end_layout

\begin_layout Plain Layout

x_min = 0; x_max = 10;
\end_layout

\begin_layout Plain Layout

dx = 1.5;   % Arbitrarily Chosen
\end_layout

\begin_layout Plain Layout

% t domain
\end_layout

\begin_layout Plain Layout

coef = 0.5;  % Some relationship between dt/dx^2 to vary
\end_layout

\begin_layout Plain Layout

delta_t = dx.^2.*coef;
\end_layout

\begin_layout Plain Layout

t_min = 0; t_max = 2;
\end_layout

\begin_layout Plain Layout

Nt = (t_max-t_min)/delta_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Initial Mesh
\end_layout

\begin_layout Plain Layout

x = x_min:dx:x_max;
\end_layout

\begin_layout Plain Layout

% Initial condition
\end_layout

\begin_layout Plain Layout

init_field = sin(x) + sin(x/2) + sin(x/3) + sin(x/4);
\end_layout

\begin_layout Plain Layout

u(:,1) = init_field;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% First loop for time
\end_layout

\begin_layout Plain Layout

for jj = 1:Nt
\end_layout

\begin_layout Plain Layout

    % Second loop for x
\end_layout

\begin_layout Plain Layout

    for ii = 2:size(u,1)-1
\end_layout

\begin_layout Plain Layout

        % Vectors for tridiagonal matrix
\end_layout

\begin_layout Plain Layout

        a(ii) = 1+coef;   % 1 + dt/dx^2
\end_layout

\begin_layout Plain Layout

        b(ii) = -1/2*coef;      % -1/2 * dt/dx^2
\end_layout

\begin_layout Plain Layout

        d(ii) = u(ii,jj);   % Solution vector (RHS)
\end_layout

\begin_layout Plain Layout

    end
\end_layout

\begin_layout Plain Layout

    % Constructing tridiagonal matrix
\end_layout

\begin_layout Plain Layout

    A = diag(a(2:size(u,1)-1),0) + diag(b(2:size(u,1)-2),1) + diag(b(2:size(u,1)
-2),-1);
\end_layout

\begin_layout Plain Layout

    % Construct the RHS: A * d + [vec] - [vec]
\end_layout

\begin_layout Plain Layout

    rhs = A * d(2:end)';
\end_layout

\begin_layout Plain Layout

    rhs(1) = rhs(1) + coef*u(1,1);  % + coef/2*u(1,1) + coef/2*u(1,1)
\end_layout

\begin_layout Plain Layout

    rhs(end) = rhs(end) + coef*u(end,1);    % + coef/2*u(N,1) + coef/2*u(N,1)
\end_layout

\begin_layout Plain Layout

    % Solving matrix equation using GaussSeidel code from previous week's
 work
\end_layout

\begin_layout Plain Layout

    [u_sol, iter] = GaussSeidel(A,rhs,10^-6);
\end_layout

\begin_layout Plain Layout

    % Storing result in matrix
\end_layout

\begin_layout Plain Layout

    u(:,jj+1) = [u(1,1) u_sol' u(size(u,1),1)]';
\end_layout

\begin_layout Plain Layout

end
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Plotting contour of results
\end_layout

\begin_layout Plain Layout

contourf(u');
\end_layout

\end_inset


\end_layout

\begin_layout Problem
It was seen that the Crank-Nicolson method was unconditionally stable.
\end_layout

\begin_layout Problem
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=0.5
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 1.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=1.0
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 2.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Problem
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=2.5
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 3.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "48col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
\begin_inset Formula 
\[
\frac{\Delta t}{\Delta x^{2}}=10
\]

\end_inset


\begin_inset Graphics
	filename Lab 8 Question 1 Figure 4.eps
	width 80text%

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
